//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.4
//
// <auto-generated>
//
// Generated from file `Hello.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace TestInterface1
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Test : global::Ice.Object, TestOperations_
    {
    }
}

namespace TestInterface2
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface TestCallBack : global::Ice.Object, TestCallBackOperations_
    {
    }
}

namespace TestInterface1
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public delegate void Callback_Test_SendMessageToServer();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public delegate void Callback_Test_CheckAlive();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public delegate void Callback_Test_Register();
}

namespace TestInterface2
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public delegate void Callback_TestCallBack_SendMessageToClient();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public delegate void Callback_TestCallBack_CheckAlive();
}

namespace TestInterface1
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public interface TestPrx : global::Ice.ObjectPrx
    {
        void SendMessageToServer(string msg, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task SendMessageToServerAsync(string msg, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Test_SendMessageToServer> begin_SendMessageToServer(string msg, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_SendMessageToServer(string msg, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_SendMessageToServer(string msg, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_SendMessageToServer(global::Ice.AsyncResult asyncResult);

        void CheckAlive(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task CheckAliveAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Test_CheckAlive> begin_CheckAlive(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_CheckAlive(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_CheckAlive(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_CheckAlive(global::Ice.AsyncResult asyncResult);

        void Register(string address, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task RegisterAsync(string address, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Test_Register> begin_Register(string address, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_Register(string address, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_Register(string address, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_Register(global::Ice.AsyncResult asyncResult);
    }
}

namespace TestInterface2
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public interface TestCallBackPrx : global::Ice.ObjectPrx
    {
        void SendMessageToClient(string msg, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task SendMessageToClientAsync(string msg, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TestCallBack_SendMessageToClient> begin_SendMessageToClient(string msg, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_SendMessageToClient(string msg, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_SendMessageToClient(string msg, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_SendMessageToClient(global::Ice.AsyncResult asyncResult);

        void CheckAlive(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task CheckAliveAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TestCallBack_CheckAlive> begin_CheckAlive(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_CheckAlive(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_CheckAlive(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_CheckAlive(global::Ice.AsyncResult asyncResult);
    }
}

namespace TestInterface1
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public interface TestOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
        void SendMessageToServer(string msg, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
        void CheckAlive(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
        void Register(string address, global::Ice.Current current = null);
    }
}

namespace TestInterface2
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public interface TestCallBackOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
        void SendMessageToClient(string msg, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
        void CheckAlive(global::Ice.Current current = null);
    }
}

namespace TestInterface1
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    [global::System.Serializable]
    public sealed class TestPrxHelper : global::Ice.ObjectPrxHelperBase, TestPrx
    {
        public TestPrxHelper()
        {
        }

        public TestPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public void SendMessageToServer(string msg, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_SendMessageToServerAsync(msg, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void CheckAlive(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_CheckAliveAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void Register(string address, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_RegisterAsync(address, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task SendMessageToServerAsync(string msg, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_SendMessageToServerAsync(msg, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_SendMessageToServerAsync(string iceP_msg, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_SendMessageToServer(iceP_msg, context, synchronous, completed);
            return completed.Task;
        }

        private const string _SendMessageToServer_name = "SendMessageToServer";

        private void _iceI_SendMessageToServer(string iceP_msg, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _SendMessageToServer_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_msg);
                });
        }

        public global::System.Threading.Tasks.Task CheckAliveAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_CheckAliveAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_CheckAliveAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_CheckAlive(context, synchronous, completed);
            return completed.Task;
        }

        private const string _CheckAlive_name = "CheckAlive";

        private void _iceI_CheckAlive(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _CheckAlive_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task RegisterAsync(string address, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_RegisterAsync(address, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_RegisterAsync(string iceP_address, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_Register(iceP_address, context, synchronous, completed);
            return completed.Task;
        }

        private const string _Register_name = "Register";

        private void _iceI_Register(string iceP_address, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _Register_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_address);
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Test_SendMessageToServer> begin_SendMessageToServer(string msg, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_SendMessageToServer(msg, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_SendMessageToServer(string msg, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_SendMessageToServer(msg, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_SendMessageToServer(string msg, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_SendMessageToServer(msg, context, callback, cookie, false);
        }

        public void end_SendMessageToServer(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _SendMessageToServer_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Test_SendMessageToServer> begin_SendMessageToServer(string iceP_msg, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Test_SendMessageToServer, object>(
                (Callback_Test_SendMessageToServer cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _SendMessageToServer_name, cookie, completedCallback);
            _iceI_SendMessageToServer(iceP_msg, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Test_CheckAlive> begin_CheckAlive(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_CheckAlive(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_CheckAlive(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_CheckAlive(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_CheckAlive(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_CheckAlive(context, callback, cookie, false);
        }

        public void end_CheckAlive(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _CheckAlive_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Test_CheckAlive> begin_CheckAlive(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Test_CheckAlive, object>(
                (Callback_Test_CheckAlive cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _CheckAlive_name, cookie, completedCallback);
            _iceI_CheckAlive(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Test_Register> begin_Register(string address, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_Register(address, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_Register(string address, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_Register(address, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_Register(string address, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_Register(address, context, callback, cookie, false);
        }

        public void end_Register(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _Register_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Test_Register> begin_Register(string iceP_address, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Test_Register, object>(
                (Callback_Test_Register cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _Register_name, cookie, completedCallback);
            _iceI_Register(iceP_address, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static TestPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            TestPrx r = b as TestPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                TestPrxHelper h = new TestPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TestPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            TestPrx r = b as TestPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                TestPrxHelper h = new TestPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TestPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    TestPrxHelper h = new TestPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static TestPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    TestPrxHelper h = new TestPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static TestPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            TestPrx r = b as TestPrx;
            if(r == null)
            {
                TestPrxHelper h = new TestPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TestPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            TestPrxHelper h = new TestPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::TestInterface1::Test"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, TestPrx v)
        {
            ostr.writeProxy(v);
        }

        public static TestPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                TestPrxHelper result = new TestPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace TestInterface2
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    [global::System.Serializable]
    public sealed class TestCallBackPrxHelper : global::Ice.ObjectPrxHelperBase, TestCallBackPrx
    {
        public TestCallBackPrxHelper()
        {
        }

        public TestCallBackPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public void SendMessageToClient(string msg, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_SendMessageToClientAsync(msg, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void CheckAlive(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_CheckAliveAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task SendMessageToClientAsync(string msg, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_SendMessageToClientAsync(msg, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_SendMessageToClientAsync(string iceP_msg, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_SendMessageToClient(iceP_msg, context, synchronous, completed);
            return completed.Task;
        }

        private const string _SendMessageToClient_name = "SendMessageToClient";

        private void _iceI_SendMessageToClient(string iceP_msg, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _SendMessageToClient_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_msg);
                });
        }

        public global::System.Threading.Tasks.Task CheckAliveAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_CheckAliveAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_CheckAliveAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_CheckAlive(context, synchronous, completed);
            return completed.Task;
        }

        private const string _CheckAlive_name = "CheckAlive";

        private void _iceI_CheckAlive(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _CheckAlive_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_TestCallBack_SendMessageToClient> begin_SendMessageToClient(string msg, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_SendMessageToClient(msg, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_SendMessageToClient(string msg, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_SendMessageToClient(msg, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_SendMessageToClient(string msg, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_SendMessageToClient(msg, context, callback, cookie, false);
        }

        public void end_SendMessageToClient(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _SendMessageToClient_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_TestCallBack_SendMessageToClient> begin_SendMessageToClient(string iceP_msg, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestCallBack_SendMessageToClient, object>(
                (Callback_TestCallBack_SendMessageToClient cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _SendMessageToClient_name, cookie, completedCallback);
            _iceI_SendMessageToClient(iceP_msg, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TestCallBack_CheckAlive> begin_CheckAlive(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_CheckAlive(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_CheckAlive(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_CheckAlive(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_CheckAlive(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_CheckAlive(context, callback, cookie, false);
        }

        public void end_CheckAlive(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _CheckAlive_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_TestCallBack_CheckAlive> begin_CheckAlive(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestCallBack_CheckAlive, object>(
                (Callback_TestCallBack_CheckAlive cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _CheckAlive_name, cookie, completedCallback);
            _iceI_CheckAlive(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static TestCallBackPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            TestCallBackPrx r = b as TestCallBackPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                TestCallBackPrxHelper h = new TestCallBackPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TestCallBackPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            TestCallBackPrx r = b as TestCallBackPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                TestCallBackPrxHelper h = new TestCallBackPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TestCallBackPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    TestCallBackPrxHelper h = new TestCallBackPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static TestCallBackPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    TestCallBackPrxHelper h = new TestCallBackPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static TestCallBackPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            TestCallBackPrx r = b as TestCallBackPrx;
            if(r == null)
            {
                TestCallBackPrxHelper h = new TestCallBackPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TestCallBackPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            TestCallBackPrxHelper h = new TestCallBackPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::TestInterface2::TestCallBack"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, TestCallBackPrx v)
        {
            ostr.writeProxy(v);
        }

        public static TestCallBackPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                TestCallBackPrxHelper result = new TestCallBackPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace TestInterface1
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public abstract class TestDisp_ : global::Ice.ObjectImpl, Test
    {
        #region Slice operations

        public abstract void SendMessageToServer(string msg, global::Ice.Current current = null);

        public abstract void CheckAlive(global::Ice.Current current = null);

        public abstract void Register(string address, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::TestInterface1::Test"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_SendMessageToServer(Test obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_msg;
            iceP_msg = istr.readString();
            inS.endReadParams();
            obj.SendMessageToServer(iceP_msg, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_CheckAlive(Test obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.CheckAlive(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_Register(Test obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_address;
            iceP_address = istr.readString();
            inS.endReadParams();
            obj.Register(iceP_address, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "CheckAlive",
            "Register",
            "SendMessageToServer",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_CheckAlive(this, inS, current);
                }
                case 1:
                {
                    return iceD_Register(this, inS, current);
                }
                case 2:
                {
                    return iceD_SendMessageToServer(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}

namespace TestInterface2
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public abstract class TestCallBackDisp_ : global::Ice.ObjectImpl, TestCallBack
    {
        #region Slice operations

        public abstract void SendMessageToClient(string msg, global::Ice.Current current = null);

        public abstract void CheckAlive(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::TestInterface2::TestCallBack"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_SendMessageToClient(TestCallBack obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_msg;
            iceP_msg = istr.readString();
            inS.endReadParams();
            obj.SendMessageToClient(iceP_msg, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_CheckAlive(TestCallBack obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.CheckAlive(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "CheckAlive",
            "SendMessageToClient",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_CheckAlive(this, inS, current);
                }
                case 1:
                {
                    return iceD_SendMessageToClient(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
